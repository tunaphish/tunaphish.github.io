{"version":3,"file":"component---src-pages-index-js-87a5738ca5a1bcc8cd38.js","mappings":"uJAiCA,IA9BeA,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAC3C,MACMI,EADW,MACEH,EAASI,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEAG,EAAAA,cAAA,MAAIC,UAAU,gBACZD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAKR,IAKhBK,EAAAA,cAACE,EAAAA,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCR,GAMLK,EAAAA,cAAA,OAAKC,UAAU,iBAAiB,oBAAmBJ,GACjDG,EAAAA,cAAA,UAAQC,UAAU,iBAAiBF,GACnCC,EAAAA,cAAA,YAAOJ,GACPI,EAAAA,cAAA,cAAQ,MACH,IAAII,MAAOC,eAEZ,C,+CCUV,IA7BYZ,IAAuC,IAADa,EAAA,IAArC,YAAEC,EAAW,MAAEZ,EAAK,SAAEC,GAAUH,EAC3C,MAAM,KAAEe,IAASC,EAAAA,EAAAA,gBAAe,cAa1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApBN,EAAGE,EAAKG,oBAAY,IAAAL,OAAA,EAAjBA,EAAmBX,MAExC,OACEK,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQY,EAAe,GAAGjB,OAAWiB,IAAiBjB,GACtDK,EAAAA,cAAA,QAAMa,KAAK,cAAcC,QAASJ,IAClCV,EAAAA,cAAA,QAAMe,SAAS,WAAWD,QAASnB,IACnCK,EAAAA,cAAA,QAAMe,SAAS,iBAAiBD,QAASJ,IACzCV,EAAAA,cAAA,QAAMe,SAAS,UAAUD,QAAQ,YAChClB,EACA,C,6GC0BP,UAvDkBH,IAAyB,IAADuB,EAAA,IAAvB,KAAEC,EAAI,SAAEvB,GAAUD,EACnC,MAAMyB,GAAkC,QAAtBF,EAAAC,EAAKT,KAAKG,oBAAY,IAAAK,OAAA,EAAtBA,EAAwBrB,QAAS,QAC7CwB,EAAQF,EAAKG,kBAAkBC,MACvBF,EAAMG,KAAIC,GAAQ,IAAInB,KAAKmB,EAAKC,YAAYC,QAE1D,OAAqB,IAAjBN,EAAMO,OAEN1B,EAAAA,cAAC2B,EAAAA,EAAM,CAACjC,SAAUA,EAAUC,MAAOuB,GACjClB,EAAAA,cAAA,SAAG,8JAUPA,EAAAA,cAAC2B,EAAAA,EAAM,CAACjC,SAAUA,EAAUC,MAAOuB,GACjClB,EAAAA,cAAA,MAAI4B,MAAO,CAAEC,UAAW,SACrBV,EAAMG,KAAIC,IACT,MAAM5B,EAAQ4B,EAAKC,YAAY7B,OAAS4B,EAAKO,OAAOC,KAEpD,OACE/B,EAAAA,cAAA,MAAIgC,IAAKT,EAAKO,OAAOC,MACnB/B,EAAAA,cAAA,WACEC,UAAU,iBACVgC,WAAS,EACTC,SAAS,6BAETlC,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAI,OAAOoB,EAAKO,OAAOC,OAAQI,SAAS,OAC5CnC,EAAAA,cAAA,QAAMmC,SAAS,YAAYxC,KAG/BK,EAAAA,cAAA,aAAQuB,EAAKC,YAAYC,OAE3BzB,EAAAA,cAAA,eACEA,EAAAA,cAAA,KACEoC,wBAAyB,CACvBC,OAAQd,EAAKC,YAAYjB,aAAegB,EAAKe,SAE/CH,SAAS,kBAIZ,KAIJ,EAWN,MAAMI,EAAOA,IAAMvC,EAAAA,cAACwC,EAAAA,EAAG,CAAC7C,MAAM,a","sources":["webpack://tunaphish.github.io/./src/components/layout.js","webpack://tunaphish.github.io/./src/components/seo.js","webpack://tunaphish.github.io/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const dates = posts.map(post => new Date(post.frontmatter.date));\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={`blog${post.fields.slug}`} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","header","React","className","Link","to","Date","getFullYear","_site$siteMetadata","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","_data$site$siteMetada","data","siteTitle","posts","allMarkdownRemark","nodes","map","post","frontmatter","date","length","Layout","style","listStyle","fields","slug","key","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","excerpt","Head","Seo"],"sourceRoot":""}