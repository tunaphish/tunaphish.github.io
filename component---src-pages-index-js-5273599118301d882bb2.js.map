{"version":3,"file":"component---src-pages-index-js-5273599118301d882bb2.js","mappings":"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","sources":["webpack://tunaphish.github.io/./src/components/layout.js","webpack://tunaphish.github.io/./src/components/seo.js","webpack://tunaphish.github.io/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BEFORE_FIRST_POST_COLOR = '#B0B0B0';\nconst FUTURE_DATE_COLOR = '#E0E0E0'\nconst TOTAL_WEEKS = 77 * 52;\nconst BIRTH_DATE = new Date('1992-12-09');\n\nfunction getActivityColor(activityLevel) {\n  if (activityLevel >= 5) {\n    return '#004CFF';\n  } else if (activityLevel >= 3) {\n    return '#5A8FFF';\n  } else if (activityLevel >= 1) {\n    return '#A0C4FF';\n  }\n  return '#edf6ff'; \n}\n\nconst getWeeksBetween = (endDate, startDate) => {\n  const differenceInMs = Math.abs(endDate - startDate);\n  return Math.floor(differenceInMs / (1000 * 60 * 60 * 24 * 7));\n}\n\nconst countDatesByWeek = (dates, startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n\n  // Calculate total weeks between start and end date\n  const totalWeeks = Math.ceil((end - start) / (1000 * 60 * 60 * 24 * 7));\n  \n  // Initialize an array to hold the count of dates per week\n  const weeksCount = new Array(totalWeeks).fill(0);\n\n  // Count each date in the corresponding week\n  dates.forEach(date => {\n    const currentDate = new Date(date);\n    \n    // Check if date falls within the range\n    if (currentDate >= start && currentDate <= end) {\n      // Calculate the week index\n      const weekIndex = Math.floor((currentDate - start) / (1000 * 60 * 60 * 24 * 7));\n      // Increment the count for this week\n      weeksCount[weekIndex]++;\n    }\n  });\n\n  return weeksCount;\n}\n\nconst Grid = ({dates}) => {\n  let i=0;\n  const grid = [];\n\n  const firstPostDate = dates[dates.length-1];\n  const weeksBeforePostingFirstTime = getWeeksBetween(firstPostDate, BIRTH_DATE);\n  while (i < weeksBeforePostingFirstTime) {\n    const backgroundColor = BEFORE_FIRST_POST_COLOR;\n\n    grid.push(\n      <div\n        key={i}\n        className=\"cell\"\n        style={{ backgroundColor }}\n      />\n    );\n\n    i++;\n  }\n\n  const currentDate = new Date();\n  const datesByWeek = countDatesByWeek(dates, firstPostDate, currentDate);\n  for (let idx=0; idx<datesByWeek.length; idx++) {\n    const dateAmt = datesByWeek[idx];\n    const backgroundColor = getActivityColor(dateAmt);\n\n    grid.push(\n      <div\n        key={idx+i}\n        className=\"cell\"\n        style={{ backgroundColor }}\n      />\n    );\n  }\n  \n  i += datesByWeek.length;\n  while (i < TOTAL_WEEKS) {\n    const backgroundColor = FUTURE_DATE_COLOR;\n\n    grid.push(\n      <div\n        key={i}\n        className=\"cell\"\n        style={{ backgroundColor }}\n      />\n    );\n\n    i++;\n  }\n\n  return <div className=\"grid\">{grid}</div>;\n};\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const dates = posts.map(post => new Date(post.frontmatter.date));\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <blockquote>... what you pay attention to will define, for you, what reality is. - Four Thousand Weeks</blockquote>\n      <Link to={'blog/2024-11-12-four-thousand-weeks/'} itemProp=\"url\"><Grid dates={dates}/></Link>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={`blog${post.fields.slug}`} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","header","className","Link","to","Date","getFullYear","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","BIRTH_DATE","Grid","dates","i","grid","firstPostDate","length","weeksBeforePostingFirstTime","endDate","startDate","differenceInMs","Math","abs","floor","getWeeksBetween","backgroundColor","push","key","style","datesByWeek","start","end","totalWeeks","ceil","weeksCount","Array","fill","forEach","date","currentDate","weekIndex","countDatesByWeek","idx","dateAmt","activityLevel","data","siteTitle","posts","allMarkdownRemark","nodes","map","post","frontmatter","itemProp","listStyle","fields","slug","itemScope","itemType","dangerouslySetInnerHTML","__html","excerpt","Head"],"sourceRoot":""}